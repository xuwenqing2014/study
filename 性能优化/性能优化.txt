1、从dns出发
（1）使用link标签的preload预加载和prefetch预读取将来需要的文件
2、减小文件体积
（1）js打包压缩
（2）图片压缩（大背景图使用jpg格式）
（3）服务端gzip压缩
3、减少文件请求次数
（1）雪碧图、图片字体
（2）缓存控制（强缓存+协商缓存）
（3）懒加载（echart懒加载、moment换成day、只引进使用lodash的模块、script标签的async和defer）
4、距离
（1）静态资源使用cdn
5、服务端渲染
加快首屏加载速度
6、代码层面
（1）节流防抖
（2）vue中v-if与v-show
（3）vue中使用函数式组件
（4）长列表的虚拟滚动

实际开发中自己总结的：
1、将小图标打包成base64代码，或者使用雪碧图，或者使用字体包，减少请求
2、H5图片使用媒体查询去适配两倍图、三倍图，避免全部使用三倍图
3、使用tinypng压缩图片，单张图片大小不超过100k，图片过多时，图片懒加载。图片尺寸过大时，可将图片切分成几张图片，避免白屏时间过长
4、发布新版本时，静态资源（如公共css、img等）不更新版本号，只更新经过打包之后的js、css等的版本号
5、script标签引入的js，如果不是在首屏加载的时候需要用到，可以使用async和defer异步加载
6、使用css3动画，尽量使用transform和opacity，避免卡顿
7、vue打包时打包gz包，nginx配置gzip压缩
8、事件节流和事件防抖
9、vue编译开启现代模式
10、路由懒加载，第三方库按需加载，vue中的组件，只用一次的话，只需局部注册，避免全局注册